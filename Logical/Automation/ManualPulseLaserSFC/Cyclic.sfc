PROGRAM _CYCLIC
<?AutomationStudio FileVersion="4.9"?>
INITIAL_STEP START:
(* @LANGUAGE := 'st' *)

SFCReset := FALSE;
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM START TO Step1:=
TRUE
END_TRANSITION
(* @SFCNOJUMP := 'Step1' *)
IEC_STEP Step1:
FunctionblockCalls(S);
Step1Active(N);
PixelConvert(S);
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
ENTRY_ACTION
(* @LANGUAGE := 'st' *)

gVFLCR.status.pythonOpcuaControlEnabled := FALSE;
(* TODO: Insert Program *)
END_ACTION
TRANSITION FROM Step1 TO InitializeManualCalibration:=
OP_MANUAL_CALIBRATE_LASER
END_TRANSITION
(* @SFCNOJUMP := 'InitializeManualCalibration' *)
TRANSITION FROM Step1 TO CheckLaserModulationOMS:=
OP_MANUAL_CALIBRATE_BEAM
END_TRANSITION
(* @SFCNOJUMP := 'CheckLaserModulationOMS' *)
STEP CheckLaserModulationOMS:
(* @LANGUAGE := 'st' *)
OP_MANUAL_CALIBRATE_BEAM := FALSE;

IF gVFLCR.status.laserModulationEnabled THEN
	StepDone := TRUE;
ELSE
	StepDone := FALSE;	
END_IF
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM CheckLaserModulationOMS TO InitializeManualCalibration1:=
StepDone
END_TRANSITION
(* @SFCNOJUMP := 'InitializeManualCalibration1' *)
STEP InitializeManualCalibration1:
(* @LANGUAGE := 'st' *)

// initialize app with manual pulse pars
Command.Command := gVFLCR.command.initializeManualCalibration;

Command.pParameters := ADR(gManualPulseTypeSelected);
Command.sParameters := SIZEOF(gManualPulseTypeSelected);

Command.Execute := TRUE;
Command();

IF Command.Done THEN
	StepDone := TRUE;
	Command.Execute := FALSE;
	Command();
ELSE
	
	StepDone := FALSE;
	
END_IF
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM InitializeManualCalibration1 TO CheckCanCalibrate1:=
StepDone
END_TRANSITION
(* @SFCNOJUMP := 'CheckCanCalibrate1' *)
STEP CheckCanCalibrate1:
(* @LANGUAGE := 'st' *)
Command.Command := gVFLCR.command.checkMotionOk;
Command.Execute := TRUE;
Command();

IF Command.Done THEN
	StepDone := TRUE;
	Command.Execute := FALSE;
	Command();
ELSE
	StepDone := FALSE;	
END_IF

NEXT_PIXEL := FALSE;
SKIP_PIXEL := FALSE;
END_TEST := FALSE;







END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM CheckCanCalibrate1 TO PulseLaser1:=
StepDone
END_TRANSITION
(* @SFCNOJUMP := 'PulseLaser1' *)
STEP PulseLaser1:
(* @LANGUAGE := 'st' *)
Command.Command := gVFLCR.command.manualPulse;

Command.pParameters := ADR(task.internal.manualPulse);
Command.sParameters := SIZEOF(task.internal.manualPulse);

Command.Execute := TRUE;
Command();

IF Command.Done THEN
	StepDone := TRUE;
	Command.Execute := FALSE;
	Command();
ELSE
	StepDone := FALSE;	
END_IF
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM PulseLaser1 TO NextOperation1:=
StepDone
END_TRANSITION
(* @SFCNOJUMP := 'NextOperation1' *)
STEP NextOperation1:
(* @LANGUAGE := 'st' *)

task.internal.showPopUp := TRUE;
task.internal.showNextPixel := TRUE;
task.internal.showSkipPixel:= TRUE;


IF task.internal.showPopUp THEN
		
	IF task.parameters.pixelNum >= MACHINE_NUM_LASERS_TOTAL THEN
		
		task.internal.showNextPixel := FALSE;
		task.internal.showSkipPixel:= FALSE;
		
		
	ELSIF gVFLCR.status.vfpMap[task.parameters.pixelNum , 1] = FALSE THEN
			
		// pixel is disabled
		//task.internal.msgId := TRUE;
		task.internal.showNextPixel := FALSE;	
		
			
	ELSE
		
		// pixel is enabled
		//task.internal.msgId := TRUE;
		task.internal.showSkipPixel:= FALSE;
			
	END_IF
	
END_IF
	
IF task.internal.showPopUp <> 0 THEN
		
	
		
END_IF
	
	//	IF messageHandler.cancel THEN
	//		messageHandler.cancel := 0;
	//		task.internal.msgId := FALSE;
	//		SFCReset := TRUE;
	//		gMachine.IN.CMD.Stop:= TRUE;
	//	END_IF
	
	//Once a selection is made we are good
IF NEXT_PIXEL OR SKIP_PIXEL OR END_TEST THEN
	
	task.internal.showPopUp := FALSE;
	task.internal.showSkipPixel:= FALSE;
	task.internal.showNextPixel := FALSE;
		
END_IF
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
ENTRY_ACTION
(* @LANGUAGE := 'st' *)
task.internal.showPopUp := 0;
NEXT_PIXEL := FALSE;
SKIP_PIXEL := FALSE;
END_TEST := FALSE;
END_ACTION
EXIT_ACTION
(* @LANGUAGE := 'st' *)
NEXT_PIXEL := FALSE;
SKIP_PIXEL := FALSE;
END_TEST := FALSE;
(* TODO: Insert Program *)
END_ACTION
TRANSITION FROM NextOperation1 TO IteratePixel1:=
NEXT_PIXEL
END_TRANSITION
(* @SFCNOJUMP := 'IteratePixel1' *)
TRANSITION FROM NextOperation1 TO SkipPixel1:=
SKIP_PIXEL
END_TRANSITION
(* @SFCNOJUMP := 'SkipPixel1' *)
STEP SkipPixel1:
(* @LANGUAGE := 'st' *)
task.parameters.pixelNum := task.parameters.pixelNum + 2;
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM SkipPixel1 TO CheckCanCalibrate1:=
TRUE
END_TRANSITION
(* @SFCISJUMP := 'CheckCanCalibrate1' *)
TRANSITION FROM NextOperation1 TO EndTest1:=
END_TEST
END_TRANSITION
(* @SFCNOJUMP := 'EndTest1' *)
STEP EndTest1:
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM EndTest1 TO Step1:=
TRUE
END_TRANSITION
(* @SFCISJUMP := 'Step1' *)
STEP IteratePixel1:
(* @LANGUAGE := 'st' *)
task.parameters.pixelNum := task.parameters.pixelNum + 1;
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM IteratePixel1 TO CheckCanCalibrate1:=
TRUE
END_TRANSITION
(* @SFCISJUMP := 'CheckCanCalibrate1' *)
STEP InitializeManualCalibration:
(* @LANGUAGE := 'st' *)
// initialize app with manual pulse pars
Command.Command := gVFLCR.command.initializeManualCalibration;

Command.pParameters := ADR(gManualPulseTypeSelected);
Command.sParameters := SIZEOF(gManualPulseTypeSelected);

Command.Execute := TRUE;
Command();

IF Command.Done THEN
	StepDone := TRUE;
	Command.Execute := FALSE;
	Command();
ELSE
	
	StepDone := FALSE;
	
END_IF
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM InitializeManualCalibration TO CheckCanCalibrate:=
StepDone
END_TRANSITION
(* @SFCNOJUMP := 'CheckCanCalibrate' *)
STEP CheckCanCalibrate:
(* @LANGUAGE := 'st' *)
Command.Command := gVFLCR.command.checkMotionOk;
Command.Execute := TRUE;
Command();

IF Command.Done THEN
	StepDone := TRUE;
	Command.Execute := FALSE;
	Command();
ELSE
	StepDone := FALSE;	
END_IF

NEXT_PIXEL := FALSE;
SKIP_PIXEL := FALSE;
END_TEST := FALSE;







END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM CheckCanCalibrate TO PulseLaser:=
StepDone
END_TRANSITION
(* @SFCNOJUMP := 'PulseLaser' *)
STEP PulseLaser:
(* @LANGUAGE := 'st' *)
Command.Command := gVFLCR.command.manualPulse;

Command.pParameters := ADR(task.internal.manualPulse);
Command.sParameters := SIZEOF(task.internal.manualPulse);

Command.Execute := TRUE;
Command();

IF Command.Done THEN
	StepDone := TRUE;
	Command.Execute := FALSE;
	Command();
ELSE
	StepDone := FALSE;	
END_IF
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM PulseLaser TO NextOperation:=
StepDone
END_TRANSITION
(* @SFCNOJUMP := 'NextOperation' *)
STEP NextOperation:
(* @LANGUAGE := 'st' *)
OK	:= FALSE;

IF task.internal.showPopUp = 0 THEN
	task.internal.showPopUp := 1; 
	
ELSIF task.internal.showPopUp <> 0 THEN
	
	//Waiting for the user
	
END_IF

//IF messageHandler.cancel THEN
//	messageHandler.cancel := 0;
//	messageHandler.msgId := 0;
//	SFCReset := TRUE;
//	gMachine.IN.CMD.Stop:= TRUE;
//END_IF

//Once a selection is made we are good
IF NEXT_PIXEL OR SKIP_PIXEL OR END_TEST THEN

	OK := TRUE;
	task.internal.showPopUp := 0;
	
END_IF
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM NextOperation TO IteratePixel:=
NEXT_PIXEL
END_TRANSITION
(* @SFCNOJUMP := 'IteratePixel' *)
TRANSITION FROM NextOperation TO SkipPixel:=
SKIP_PIXEL
END_TRANSITION
(* @SFCNOJUMP := 'SkipPixel' *)
STEP SkipPixel:
(* @LANGUAGE := 'st' *)
task.parameters.pixelNum := task.parameters.pixelNum + 2;
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM SkipPixel TO CheckCanCalibrate:=
TRUE
END_TRANSITION
(* @SFCISJUMP := 'CheckCanCalibrate' *)
TRANSITION FROM NextOperation TO EndTest:=
END_TEST
END_TRANSITION
(* @SFCNOJUMP := 'EndTest' *)
STEP EndTest:
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM EndTest TO Step1:=
TRUE
END_TRANSITION
(* @SFCISJUMP := 'Step1' *)
STEP IteratePixel:
(* @LANGUAGE := 'st' *)
task.parameters.pixelNum := task.parameters.pixelNum + 1;
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM IteratePixel TO CheckCanCalibrate:=
TRUE
END_TRANSITION
(* @SFCISJUMP := 'CheckCanCalibrate' *)
END_PROGRAM
