define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dFByb3ZpZGVySW50ZXJmYWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9jb21tb24vdGV4dFByb3ZpZGVyL2ludGVyZmFjZS90ZXh0UHJvdmlkZXJJbnRlcmZhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50QmFzZS9pbnRlcmZhY2VzL2NvbXBvbmVudEludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBGb3JtYXR0ZXJJbnB1dEFyZ3VtZW50TGlzdCB9IGZyb20gXCIuLi90ZXh0Rm9ybWF0dGVyL2Zvcm1hdHRlcklucHV0QXJndW1lbnRzL2Zvcm1hdHRlcklucHV0QXJndW1lbnRMaXN0XCI7XHJcbmltcG9ydCB7IFRleHRJdGVtIH0gZnJvbSBcIi4uL3RleHRJdGVtXCI7XHJcbmltcG9ydCB7IEV2ZW50TmFtZXNwYWNlc0xvYWRlZCwgRXZlbnRTaW5nbGVUZXh0TG9hZGVkIH0gZnJvbSBcIi4uL3RleHRQcm92aWRlclwiO1xyXG5cclxuLyoqXHJcbiAqIERlY2xhcmVzIHRoZSBzZXJpZXMgcHJvdmlkZXIgaW50ZXJmYWNlLCB3aGljaCBjb250YWlucyBhbGwgZnVuY3Rpb25zIGZvciB0aGUgdGV4dHN5c3RlbVxyXG4gKlxyXG4gKiBAaW50ZXJmYWNlIElUZXh0U3lzdGVtXHJcbiAgKi9cclxuIGV4cG9ydCBpbnRlcmZhY2UgSVRleHRQcm92aWRlciBleHRlbmRzIElDb21wb25lbnR7XHJcbiAgICBcclxuICAgIGV2ZW50TmFtZXNwYWNlc0xvYWRlZDogRXZlbnROYW1lc3BhY2VzTG9hZGVkO1xyXG4gICAgZXZlbnRTaW5nbGVUZXh0TG9hZGVkOiBFdmVudFNpbmdsZVRleHRMb2FkZWQ7XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogU2VhcmNoZXMgZm9yIGFuIGVudHJ5IGluIHRoZSB0ZXh0c3lzdGVtIHdpdGggdGhlIHBhc3NlZCBuYW1lc3BhY2UgYW5kIHRleHRJZC5cclxuICAgICAqIFJldHVybnMgdGhlIHJlcXVlc3RlZCB0ZXh0LCBhIGZhbGxiYWNrIHRleHQgb3IgYW4gZXJyb3IgdGV4dC5cclxuICAgICAqIEluIGNhc2Ugb2YgYW4gZXJyb3IgdGhlIGVycm9yIGlzIGluY2x1ZGVkIGluIHRoZSBlcnJvciBjb250YWluZXIgb2YgdGhlIHJldHVybmVkIHRleHRJdGVtLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2VcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0SURcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2VDb2RlXVxyXG4gICAgICogQHJldHVybiB7Kn0gIHtUZXh0SXRlbX1cclxuICAgICAqIEBtZW1iZXJvZiBJVGV4dFByb3ZpZGVyXHJcbiAgICAgKi9cclxuICAgIGdldFJhd1RleHQobmFtZXNwYWNlOiBzdHJpbmcsIHRleHRJRDogc3RyaW5nLCBsYW5ndWFnZUNvZGU/OiBzdHJpbmcpOiBUZXh0SXRlbTtcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBTZWFyY2hlcyBmb3IgYW4gZW50cnkgaW4gdGhlIHRleHRzeXN0ZW0gd2l0aCB0aGUgcGFzc2VkIGZ1bGx5UXVhbGlmaWVkVGV4dElkLlxyXG4gICAgICogUmV0dXJucyB0aGUgcmVxdWVzdGVkIHRleHQsIGEgZmFsbGJhY2sgdGV4dCBvciBhbiBlcnJvciB0ZXh0LlxyXG4gICAgICogSW4gY2FzZSBvZiBhbiBlcnJvciB0aGUgZXJyb3IgaXMgaW5jbHVkZWQgaW4gdGhlIGVycm9yIGNvbnRhaW5lciBvZiB0aGUgcmV0dXJuZWQgdGV4dEl0ZW0uXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmdWxseVF1YWxpZmllZFRleHRJZFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtsYW5ndWFnZUNvZGVdXHJcbiAgICAgKiBAcmV0dXJuIHsqfSAge1RleHRJdGVtfVxyXG4gICAgICogQG1lbWJlcm9mIElUZXh0UHJvdmlkZXJcclxuICAgICAqL1xyXG4gICAgZ2V0UmF3VGV4dEJ5RnVsbHlRdWFsaWZpZWRUZXh0SWQoZnVsbHlRdWFsaWZpZWRUZXh0SWQ6IHN0cmluZywgbGFuZ3VhZ2VDb2RlPzogc3RyaW5nKSA6IFRleHRJdGVtO1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFNlYXJjaGVzIGZvciBhbiBlbnRyeSBpbiB0aGUgdGV4dHN5c3RlbSB3aXRoIHRoZSBwYXNzZWQgbmFtZXNwYWNlIGFuZCB0ZXh0SWQuXHJcbiAgICAgKiBJbiBjYXNlIHRoZSByZWNlaXZlZCB0ZXh0IGNvbnRhaW5zIGZvcm1hdCBpdGVtcywgdGhleSBnZXQgcmVzb2x2ZWQuXHJcbiAgICAgKiBSZXR1cm5zIHRoZSByZXF1ZXN0ZWQgdGV4dCwgYSBmYWxsYmFjayB0ZXh0IG9yIGFuIGVycm9yIHRleHQuXHJcbiAgICAgKiBJbiBjYXNlIG9mIGFuIGVycm9yIHRoZSBlcnJvciBpcyBpbmNsdWRlZCBpbiB0aGUgZXJyb3IgY29udGFpbmVyIG9mIHRoZSByZXR1cm5lZCB0ZXh0SXRlbS4gICAgICpcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZXNwYWNlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dElEXHJcbiAgICAgKiBAcGFyYW0ge0Zvcm1hdHRlcklucHV0QXJndW1lbnRMaXN0fSBmb3JtYXR0ZXJBcmdzXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2xhbmd1YWdlQ29kZV1cclxuICAgICAqIEByZXR1cm4geyp9ICB7VGV4dEl0ZW19XHJcbiAgICAgKiBAbWVtYmVyb2YgSVRleHRQcm92aWRlclxyXG4gICAgICovXHJcbiAgICBnZXRGb3JtYXR0ZWRUZXh0KG5hbWVzcGFjZTogc3RyaW5nLCB0ZXh0SUQ6IHN0cmluZywgZm9ybWF0dGVyQXJnczogRm9ybWF0dGVySW5wdXRBcmd1bWVudExpc3QsIGxhbmd1YWdlQ29kZT86IHN0cmluZykgOiBUZXh0SXRlbTtcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBOb3QgZnVsbHkgaW1wbGVtZW50ZWQhXHJcbiAgICAgKiBUaGUgcGFzc2VkIG5hbWVzcGFjZSBnZXRzIGZ1bGx5IGxvYWRlZCB0byB0aGUgdGFyZ2V0IGFuZCBwZXJzaXN0ZWQgaW4gdGhlIHRleHRTeXN0ZW1cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZXNwYWNlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2xhbmd1YWdlQ29kZV1cclxuICAgICAqIEBtZW1iZXJvZiBJVGV4dFByb3ZpZGVyXHJcbiAgICAgKi9cclxuICAgIGxvYWRGdWxsTmFtZXNwYWNlc1JlcXVlc3QobmFtZXNwYWNlOiBBcnJheTxzdHJpbmc+LCBsYW5ndWFnZUNvZGU/OiBzdHJpbmcpOyBcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBOb3QgZnVsbHkgaW1wbGVtZW50ZWQhXHJcbiAgICAgKiBUaGUgcGFzc2VkIGZ1bGx5UXVhbGlmaWVkVGV4dElkIGdldHMgbG9hZGVkIHRvIHRoZSB0YXJnZXQgYW5kIHBlcnNpc3RlZCBpbiB0aGUgdGV4dFN5c3RlbVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2VcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0SWRcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2VDb2RlXVxyXG4gICAgICogQG1lbWJlcm9mIElUZXh0UHJvdmlkZXJcclxuICAgICAqL1xyXG4gICAgbG9hZEZ1bGx5UXVhbGlmaWVkVGV4dElkUmVxdWVzdChuYW1lc3BhY2U6IHN0cmluZywgdGV4dElkOiBzdHJpbmcsIGxhbmd1YWdlQ29kZT86IHN0cmluZyk7XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgc2VsZWN0ZWQgbGFuZ3VhZ2UgZm9yIHRoZSB0ZXh0c3l0ZW1cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0ZWRMYW5ndWFnZVxyXG4gICAgICogQG1lbWJlcm9mIElUZXh0UHJvdmlkZXJcclxuICAgICAqL1xyXG4gICAgc2V0U2VsZWN0ZWRMYW5ndWFnZShzZWxlY3RlZExhbmd1YWdlOiBzdHJpbmcpOyBcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGZhbGxiYWNrIGxhbmd1YWdlIGZvciB0aGUgdGV4dHN5dGVtXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZhbGxiYWNrTGFuZ3VhZ2VcclxuICAgICAqIEBtZW1iZXJvZiBJVGV4dFByb3ZpZGVyXHJcbiAgICAgKi9cclxuICAgIHNldEZhbGxiYWNrTGFuZ3VhZ2UoZmFsbGJhY2tMYW5ndWFnZTogc3RyaW5nKTsgXHJcbiAgICBcclxuICAgIC8qKiBcclxuICAgICAqIENsZWFycyBhbGwgdGhlIHRleHQgcmVzb3VyY2VzIG9mIHRoaXMgY29tcG9uZW50XHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIFRleHRQcm92aWRlclxyXG4gICAgICovXHJcbiAgICBjbGVhcigpO1xyXG59Il19