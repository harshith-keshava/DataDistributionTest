define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ChartRenderOptimizer = /** @class */ (function () {
        function ChartRenderOptimizer() {
        }
        ChartRenderOptimizer.prototype.getPointsInCanvasBounds = function (point1, point2, canvasWidth, canvasHeight) {
            var direction = { X: point2.X - point1.X, Y: point2.Y - point1.Y };
            //if both points are outside the canvasArea and the line does not cross it set them directly next to the canvas
            if (!this.testIfLineIsInCanvas(point1, point2, canvasWidth, canvasHeight)) {
                if (point1.Y < 0) {
                    point1.Y = -1;
                    point2.Y = -1;
                }
                if (point1.Y > canvasHeight) {
                    point1.Y = canvasHeight + 1;
                    point2.Y = canvasHeight + 1;
                }
                if (point1.X < 0) {
                    point1.X = -1;
                    point2.X = -1;
                }
                if (point1.X > canvasWidth) {
                    point1.X = canvasWidth + 1;
                    point2.X = canvasWidth + 1;
                }
            }
            else {
                point1 = this.calculatePointPosition(point1, direction, canvasWidth, canvasHeight);
                point2 = this.calculatePointPosition(point2, direction, canvasWidth, canvasHeight);
            }
            return { point1: point1, point2: point2 };
        };
        ChartRenderOptimizer.prototype.testIfLineIsInCanvas = function (point1, point2, canvasWidth, canvasHeight) {
            if (point1.X < 0 && point2.X < 0) {
                return false;
            }
            if (point1.X > canvasWidth && point2.X > canvasWidth) {
                return false;
            }
            if (point1.Y < 0 && point2.Y < 0) {
                return false;
            }
            if (point1.Y > canvasHeight && point2.Y > canvasHeight) {
                return false;
            }
            return true;
        };
        ChartRenderOptimizer.prototype.calculatePointPosition = function (point, direction, canvasWidth, canvasHeight) {
            var p1 = { X: point.X, Y: point.Y };
            var v = direction;
            if (p1.X < 0) {
                var l = (p1.X / v.X) * -1;
                p1.X = 0;
                p1.Y = p1.Y + l * v.Y;
            }
            if (p1.Y < 0) {
                var l = (p1.Y / v.Y) * -1;
                p1.Y = 0;
                p1.X = p1.X + l * v.X;
            }
            if (p1.X > canvasWidth) {
                var l = (canvasWidth / v.X) - (p1.X / v.X);
                p1.X = canvasWidth;
                p1.Y = p1.Y + l * v.Y;
            }
            if (p1.Y > canvasHeight) {
                var l = (canvasHeight / v.Y) - (p1.Y / v.Y);
                p1.Y = canvasHeight;
                p1.X = p1.X + l * v.X;
            }
            return p1;
        };
        return ChartRenderOptimizer;
    }());
    exports.ChartRenderOptimizer = ChartRenderOptimizer;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnRSZW5kZXJPcHRpbWl6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYXBwL3dpZGdldHMvY2hhcnRXaWRnZXQvY2hhcnRFeHRlbnNpb25zL2NoYXJ0UmVuZGVyT3B0aW1pemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztJQUFBO1FBQUE7UUF1RkEsQ0FBQztRQXBGRyxzREFBdUIsR0FBdkIsVUFBd0IsTUFBYyxFQUFFLE1BQWEsRUFBRSxXQUFtQixFQUFFLFlBQXFCO1lBQzdGLElBQUksU0FBUyxHQUFHLEVBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUE7WUFFaEUsK0dBQStHO1lBQy9HLElBQUcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsWUFBWSxDQUFDLEVBQUM7Z0JBQ3JFLElBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUM7b0JBQ1osTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDZCxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUNqQjtnQkFDRCxJQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsWUFBWSxFQUFDO29CQUN2QixNQUFNLENBQUMsQ0FBQyxHQUFHLFlBQVksR0FBRSxDQUFDLENBQUM7b0JBQzNCLE1BQU0sQ0FBQyxDQUFDLEdBQUcsWUFBWSxHQUFFLENBQUMsQ0FBQztpQkFDOUI7Z0JBRUQsSUFBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQztvQkFDWixNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUNkLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ2pCO2dCQUNELElBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxXQUFXLEVBQUM7b0JBQ3RCLE1BQU0sQ0FBQyxDQUFDLEdBQUcsV0FBVyxHQUFHLENBQUMsQ0FBQztvQkFDM0IsTUFBTSxDQUFDLENBQUMsR0FBRyxXQUFXLEdBQUcsQ0FBQyxDQUFDO2lCQUM5QjthQUNKO2lCQUVHO2dCQUNBLE1BQU0sR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7Z0JBQ25GLE1BQU0sR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7YUFDdEY7WUFDRCxPQUFPLEVBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUMsTUFBTSxFQUFDLENBQUM7UUFDM0MsQ0FBQztRQUVELG1EQUFvQixHQUFwQixVQUFxQixNQUFNLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxZQUFZO1lBQzFELElBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUM7Z0JBQzVCLE9BQU8sS0FBSyxDQUFDO2FBQ2hCO1lBRUQsSUFBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLFdBQVcsSUFBSSxNQUFNLENBQUMsQ0FBQyxHQUFHLFdBQVcsRUFBQztnQkFDaEQsT0FBTyxLQUFLLENBQUM7YUFDaEI7WUFFRCxJQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDO2dCQUM1QixPQUFPLEtBQUssQ0FBQzthQUNoQjtZQUVELElBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxZQUFZLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxZQUFZLEVBQUM7Z0JBQ2xELE9BQU8sS0FBSyxDQUFDO2FBQ2hCO1lBRUQsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztRQUVELHFEQUFzQixHQUF0QixVQUF1QixLQUFhLEVBQUUsU0FBZ0IsRUFBRSxXQUFtQixFQUFFLFlBQXFCO1lBQzlGLElBQUksRUFBRSxHQUFHLEVBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUMsQ0FBQztZQUNsQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7WUFFbEIsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDVixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO2dCQUN6QixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDVCxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDekI7WUFFRCxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNWLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7Z0JBQ3pCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNULEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUV6QjtZQUVELElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxXQUFXLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMzQyxFQUFFLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztnQkFDbkIsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3pCO1lBRUQsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLFlBQVksRUFBRTtnQkFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzVDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsWUFBWSxDQUFDO2dCQUNwQixFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDekI7WUFFRCxPQUFPLEVBQUUsQ0FBQztRQUVkLENBQUM7UUFFTCwyQkFBQztJQUFELENBQUMsQUF2RkQsSUF1RkM7SUF2Rlksb0RBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIENoYXJ0UmVuZGVyT3B0aW1pemVye1xyXG4gICAgXHJcblxyXG4gICAgZ2V0UG9pbnRzSW5DYW52YXNCb3VuZHMocG9pbnQxIDoge1gsWX0sIHBvaW50Mjoge1gsWX0sIGNhbnZhc1dpZHRoOiBudW1iZXIsIGNhbnZhc0hlaWdodCA6IG51bWJlcil7XHJcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHtYOiBwb2ludDIuWCAtIHBvaW50MS5YLCBZOiBwb2ludDIuWSAtIHBvaW50MS5ZfVxyXG5cclxuICAgICAgICAvL2lmIGJvdGggcG9pbnRzIGFyZSBvdXRzaWRlIHRoZSBjYW52YXNBcmVhIGFuZCB0aGUgbGluZSBkb2VzIG5vdCBjcm9zcyBpdCBzZXQgdGhlbSBkaXJlY3RseSBuZXh0IHRvIHRoZSBjYW52YXNcclxuICAgICAgICBpZighdGhpcy50ZXN0SWZMaW5lSXNJbkNhbnZhcyhwb2ludDEsIHBvaW50MiwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCkpe1xyXG4gICAgICAgICAgICBpZihwb2ludDEuWSA8IDApe1xyXG4gICAgICAgICAgICAgICAgcG9pbnQxLlkgPSAtMTtcclxuICAgICAgICAgICAgICAgIHBvaW50Mi5ZID0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYocG9pbnQxLlkgPiBjYW52YXNIZWlnaHQpe1xyXG4gICAgICAgICAgICAgICAgcG9pbnQxLlkgPSBjYW52YXNIZWlnaHQgKzE7XHJcbiAgICAgICAgICAgICAgICBwb2ludDIuWSA9IGNhbnZhc0hlaWdodCArMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYocG9pbnQxLlggPCAwKXtcclxuICAgICAgICAgICAgICAgIHBvaW50MS5YID0gLTE7XHJcbiAgICAgICAgICAgICAgICBwb2ludDIuWCA9IC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHBvaW50MS5YID4gY2FudmFzV2lkdGgpe1xyXG4gICAgICAgICAgICAgICAgcG9pbnQxLlggPSBjYW52YXNXaWR0aCArIDE7XHJcbiAgICAgICAgICAgICAgICBwb2ludDIuWCA9IGNhbnZhc1dpZHRoICsgMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgcG9pbnQxID0gdGhpcy5jYWxjdWxhdGVQb2ludFBvc2l0aW9uKHBvaW50MSwgZGlyZWN0aW9uLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KTtcclxuICAgICAgICAgICAgcG9pbnQyID0gdGhpcy5jYWxjdWxhdGVQb2ludFBvc2l0aW9uKHBvaW50MiwgZGlyZWN0aW9uLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtwb2ludDE6IHBvaW50MSwgcG9pbnQyOnBvaW50Mn07XHJcbiAgICB9XHJcblxyXG4gICAgdGVzdElmTGluZUlzSW5DYW52YXMocG9pbnQxLCBwb2ludDIsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpe1xyXG4gICAgICAgIGlmKHBvaW50MS5YIDwgMCAmJiBwb2ludDIuWCA8IDApe1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihwb2ludDEuWCA+IGNhbnZhc1dpZHRoICYmIHBvaW50Mi5YID4gY2FudmFzV2lkdGgpe1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihwb2ludDEuWSA8IDAgJiYgcG9pbnQyLlkgPCAwKXtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYocG9pbnQxLlkgPiBjYW52YXNIZWlnaHQgJiYgcG9pbnQyLlkgPiBjYW52YXNIZWlnaHQpe1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjdWxhdGVQb2ludFBvc2l0aW9uKHBvaW50IDoge1gsWX0sIGRpcmVjdGlvbjoge1gsWX0sIGNhbnZhc1dpZHRoOiBudW1iZXIsIGNhbnZhc0hlaWdodCA6IG51bWJlcil7XHJcbiAgICAgICAgdmFyIHAxID0ge1g6IHBvaW50LlgsIFk6IHBvaW50Lll9O1xyXG4gICAgICAgIHZhciB2ID0gZGlyZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICBpZiAocDEuWCA8IDApIHtcclxuICAgICAgICAgICAgdmFyIGwgPSAocDEuWCAvIHYuWCkgKiAtMVxyXG4gICAgICAgICAgICBwMS5YID0gMDtcclxuICAgICAgICAgICAgcDEuWSA9IHAxLlkgKyBsICogdi5ZO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHAxLlkgPCAwKSB7XHJcbiAgICAgICAgICAgIHZhciBsID0gKHAxLlkgLyB2LlkpICogLTFcclxuICAgICAgICAgICAgcDEuWSA9IDA7XHJcbiAgICAgICAgICAgIHAxLlggPSBwMS5YICsgbCAqIHYuWDtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocDEuWCA+IGNhbnZhc1dpZHRoKSB7XHJcbiAgICAgICAgICAgIHZhciBsID0gKGNhbnZhc1dpZHRoIC8gdi5YKSAtIChwMS5YIC8gdi5YKTtcclxuICAgICAgICAgICAgcDEuWCA9IGNhbnZhc1dpZHRoO1xyXG4gICAgICAgICAgICBwMS5ZID0gcDEuWSArIGwgKiB2Llk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocDEuWSA+IGNhbnZhc0hlaWdodCkge1xyXG4gICAgICAgICAgICB2YXIgbCA9IChjYW52YXNIZWlnaHQgLyB2LlkpIC0gKHAxLlkgLyB2LlkpO1xyXG4gICAgICAgICAgICBwMS5ZID0gY2FudmFzSGVpZ2h0O1xyXG4gICAgICAgICAgICBwMS5YID0gcDEuWCArIGwgKiB2Llg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcDE7XHJcbiAgICAgICBcclxuICAgIH1cclxuXHJcbn0iXX0=