define(["require", "exports", "../userInteractionController", "../../ChartBase"], function (require, exports, userInteractionController_1, ChartBase_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ChartBoxZoomStrategy = /** @class */ (function () {
        function ChartBoxZoomStrategy(userInteractionController) {
            this.dragIsActive = false;
            this.userInteractionController = userInteractionController;
        }
        ChartBoxZoomStrategy.prototype.onMouseHover = function (chart) {
        };
        ChartBoxZoomStrategy.prototype.onClick = function (chart) {
        };
        ChartBoxZoomStrategy.prototype.onMouseDown = function (chart, chartObjectTypeUnderMouse, mousePoint) {
            if (chartObjectTypeUnderMouse.chartObjectType == ChartBase_1.ChartObjectType.cursor) {
                this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.togglePanning, chart, { boxZoomEnabled: false }));
                this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.toggleBoxZoom, chart, { panningEnabled: false }));
                this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.setCursorOnPointerPosition, chart, { cursorIndex: chartObjectTypeUnderMouse.args.cursorIndex, mousePoint: mousePoint }));
            }
            return chartObjectTypeUnderMouse;
        };
        ChartBoxZoomStrategy.prototype.onDrag = function (chart, args) {
            if (args.objectUnderMouse.chartObjectType != ChartBase_1.ChartObjectType.cursor && args.objectUnderMouse.chartObjectType != ChartBase_1.ChartObjectType.axis || this.dragIsActive == true) {
                this.dragIsActive = true;
            }
        };
        ChartBoxZoomStrategy.prototype.onDragEnd = function (chart) {
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.endCursorDrag, chart, {}));
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.toggleBoxZoom, chart, { boxZoomEnabled: true }));
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.togglePanning, chart, { panningEnabled: false }));
            this.dragIsActive = false;
        };
        return ChartBoxZoomStrategy;
    }());
    exports.ChartBoxZoomStrategy = ChartBoxZoomStrategy;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnRCb3hab29tU3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvYXBwL3dpZGdldHMvY2hhcnRXaWRnZXQvdXNlckludGVyYWN0aW9uL3N0cmF0ZWdpZXMvY2hhcnRCb3hab29tU3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBT0E7UUFNSSw4QkFBWSx5QkFBcUQ7WUFGakUsaUJBQVksR0FBRyxLQUFLLENBQUM7WUFHakIsSUFBSSxDQUFDLHlCQUF5QixHQUFHLHlCQUF5QixDQUFDO1FBQy9ELENBQUM7UUFFRCwyQ0FBWSxHQUFaLFVBQWEsS0FBa0I7UUFFL0IsQ0FBQztRQUVELHNDQUFPLEdBQVAsVUFBUSxLQUFrQjtRQUUxQixDQUFDO1FBRUQsMENBQVcsR0FBWCxVQUFZLEtBQWtCLEVBQUUseUJBQWlELEVBQUUsVUFBa0I7WUFDakcsSUFBRyx5QkFBeUIsQ0FBQyxlQUFlLElBQUksMkJBQWUsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3BFLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxjQUFjLENBQUMsSUFBSSx3REFBNEIsQ0FBQyxJQUFJLEVBQUUsNENBQWdCLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxFQUFDLGNBQWMsRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RKLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxjQUFjLENBQUMsSUFBSSx3REFBNEIsQ0FBQyxJQUFJLEVBQUUsNENBQWdCLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxFQUFDLGNBQWMsRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RKLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxjQUFjLENBQUMsSUFBSSx3REFBNEIsQ0FBQyxJQUFJLEVBQUUsNENBQWdCLENBQUMsMEJBQTBCLEVBQUUsS0FBSyxFQUFFLEVBQUMsV0FBVyxFQUFFLHlCQUF5QixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBQyxDQUFDLENBQUMsQ0FBQzthQUNoTztZQUVELE9BQU8seUJBQXlCLENBQUM7UUFDckMsQ0FBQztRQUdELHFDQUFNLEdBQU4sVUFBTyxLQUFrQixFQUFFLElBQUk7WUFDM0IsSUFBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxJQUFJLDJCQUFlLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLElBQUksMkJBQWUsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLEVBQUM7Z0JBQzdKLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO2FBQzVCO1FBQ0wsQ0FBQztRQUVELHdDQUFTLEdBQVQsVUFBVSxLQUFrQjtZQUN4QixJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLElBQUksd0RBQTRCLENBQUMsSUFBSSxFQUFFLDRDQUFnQixDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUNoSSxJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLElBQUksd0RBQTRCLENBQUMsSUFBSSxFQUFFLDRDQUFnQixDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBQyxjQUFjLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3BKLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxjQUFjLENBQUMsSUFBSSx3REFBNEIsQ0FBQyxJQUFJLEVBQUUsNENBQWdCLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxFQUFDLGNBQWMsRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUE7WUFDckosSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDOUIsQ0FBQztRQUlMLDJCQUFDO0lBQUQsQ0FBQyxBQTVDRCxJQTRDQztJQUlPLG9EQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDaGFydEludGVyYWN0aW9uU3RyYXRlZ3kgfSBmcm9tIFwiLi9jaGFyU3RyYXRlZ3lJbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgQ2hhcnRDb21tYW5kVHlwZSwgRXZlbnRFeGVjdXRlQ2hhcnRDb21tYW5kQXJncyB9IGZyb20gXCIuLi91c2VySW50ZXJhY3Rpb25Db250cm9sbGVyXCI7XHJcbmltcG9ydCB7IElVc2VySW50ZXJhY3Rpb25Db250cm9sbGVyIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvY29udHJvbGxlckludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBJVHJhY2VDaGFydCB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL3RyYWNlQ2hhcnRJbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgQ2hhcnRPYmplY3RUeXBlLCBDaGFydE9iamVjdEluZm9ybWF0aW9uIH0gZnJvbSBcIi4uLy4uL0NoYXJ0QmFzZVwiO1xyXG5pbXBvcnQgeyBJUG9pbnQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vbW9kZWxzL2NvbW1vbi9pbnRlcmZhY2VzL3BvaW50SW50ZXJmYWNlXCI7XHJcblxyXG5jbGFzcyAgQ2hhcnRCb3hab29tU3RyYXRlZ3kgaW1wbGVtZW50cyBJQ2hhcnRJbnRlcmFjdGlvblN0cmF0ZWd5e1xyXG4gICAgXHJcbiAgICBwcml2YXRlIHVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXI6IElVc2VySW50ZXJhY3Rpb25Db250cm9sbGVyO1xyXG4gICAgXHJcbiAgICBkcmFnSXNBY3RpdmUgPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih1c2VySW50ZXJhY3Rpb25Db250cm9sbGVyOiBJVXNlckludGVyYWN0aW9uQ29udHJvbGxlcikge1xyXG4gICAgICAgIHRoaXMudXNlckludGVyYWN0aW9uQ29udHJvbGxlciA9IHVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXI7XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3VzZUhvdmVyKGNoYXJ0OiBJVHJhY2VDaGFydCkge1xyXG5cclxuICAgIH1cclxuICAgIFxyXG4gICAgb25DbGljayhjaGFydDogSVRyYWNlQ2hhcnQpIHtcclxuICAgICAgXHJcbiAgICB9ICAgXHJcbiAgICBcclxuICAgIG9uTW91c2VEb3duKGNoYXJ0OiBJVHJhY2VDaGFydCwgY2hhcnRPYmplY3RUeXBlVW5kZXJNb3VzZTogQ2hhcnRPYmplY3RJbmZvcm1hdGlvbiwgbW91c2VQb2ludDogSVBvaW50KSA6IENoYXJ0T2JqZWN0SW5mb3JtYXRpb257XHJcbiAgICAgICAgaWYoY2hhcnRPYmplY3RUeXBlVW5kZXJNb3VzZS5jaGFydE9iamVjdFR5cGUgPT0gQ2hhcnRPYmplY3RUeXBlLmN1cnNvciApe1xyXG4gICAgICAgICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXIuZXhlY3V0ZUNvbW1hbmQobmV3IEV2ZW50RXhlY3V0ZUNoYXJ0Q29tbWFuZEFyZ3ModGhpcywgQ2hhcnRDb21tYW5kVHlwZS50b2dnbGVQYW5uaW5nLCBjaGFydCwge2JveFpvb21FbmFibGVkOiBmYWxzZX0pKTtcclxuICAgICAgICAgICAgdGhpcy51c2VySW50ZXJhY3Rpb25Db250cm9sbGVyLmV4ZWN1dGVDb21tYW5kKG5ldyBFdmVudEV4ZWN1dGVDaGFydENvbW1hbmRBcmdzKHRoaXMsIENoYXJ0Q29tbWFuZFR5cGUudG9nZ2xlQm94Wm9vbSwgY2hhcnQsIHtwYW5uaW5nRW5hYmxlZDogZmFsc2V9KSk7XHJcbiAgICAgICAgICAgIHRoaXMudXNlckludGVyYWN0aW9uQ29udHJvbGxlci5leGVjdXRlQ29tbWFuZChuZXcgRXZlbnRFeGVjdXRlQ2hhcnRDb21tYW5kQXJncyh0aGlzLCBDaGFydENvbW1hbmRUeXBlLnNldEN1cnNvck9uUG9pbnRlclBvc2l0aW9uLCBjaGFydCwge2N1cnNvckluZGV4OiBjaGFydE9iamVjdFR5cGVVbmRlck1vdXNlLmFyZ3MuY3Vyc29ySW5kZXgsIG1vdXNlUG9pbnQ6IG1vdXNlUG9pbnR9KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY2hhcnRPYmplY3RUeXBlVW5kZXJNb3VzZTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIG9uRHJhZyhjaGFydDogSVRyYWNlQ2hhcnQsIGFyZ3MpIHtcclxuICAgICAgICBpZihhcmdzLm9iamVjdFVuZGVyTW91c2UuY2hhcnRPYmplY3RUeXBlICE9IENoYXJ0T2JqZWN0VHlwZS5jdXJzb3IgJiYgYXJncy5vYmplY3RVbmRlck1vdXNlLmNoYXJ0T2JqZWN0VHlwZSAhPSBDaGFydE9iamVjdFR5cGUuYXhpcyB8fCB0aGlzLmRyYWdJc0FjdGl2ZSA9PSB0cnVlKXtcclxuICAgICAgICAgICAgdGhpcy5kcmFnSXNBY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkRyYWdFbmQoY2hhcnQ6IElUcmFjZUNoYXJ0KXtcclxuICAgICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXIuZXhlY3V0ZUNvbW1hbmQobmV3IEV2ZW50RXhlY3V0ZUNoYXJ0Q29tbWFuZEFyZ3ModGhpcywgQ2hhcnRDb21tYW5kVHlwZS5lbmRDdXJzb3JEcmFnLCBjaGFydCwge30pKVxyXG4gICAgICAgIHRoaXMudXNlckludGVyYWN0aW9uQ29udHJvbGxlci5leGVjdXRlQ29tbWFuZChuZXcgRXZlbnRFeGVjdXRlQ2hhcnRDb21tYW5kQXJncyh0aGlzLCBDaGFydENvbW1hbmRUeXBlLnRvZ2dsZUJveFpvb20sIGNoYXJ0LCB7Ym94Wm9vbUVuYWJsZWQ6IHRydWV9KSlcclxuICAgICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXIuZXhlY3V0ZUNvbW1hbmQobmV3IEV2ZW50RXhlY3V0ZUNoYXJ0Q29tbWFuZEFyZ3ModGhpcywgQ2hhcnRDb21tYW5kVHlwZS50b2dnbGVQYW5uaW5nLCBjaGFydCwge3Bhbm5pbmdFbmFibGVkOiBmYWxzZX0pKVxyXG4gICAgICAgIHRoaXMuZHJhZ0lzQWN0aXZlID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IHtDaGFydEJveFpvb21TdHJhdGVneX0iXX0=