define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DateTimeHelper = /** @class */ (function () {
        function DateTimeHelper() {
        }
        /**
         * Returns a formated datetime string for the given timestamp
         *
         * @static
         * @param {number} timestamp e.g. 1552925197000000
         * @returns e.g. "18.03.2019 17:06:37"
         * @memberof DateTimeHelper
         */
        DateTimeHelper.getDateTime = function (timestamp) {
            var date = new Date(timestamp / 1000); // divide by 1000 to get milliseconds
            var day = "0" + date.getDate();
            var month = "0" + (date.getMonth() + 1);
            var year = date.getFullYear();
            var hours = date.getHours();
            var minutes = "0" + date.getMinutes();
            var seconds = "0" + date.getSeconds();
            // Will display time in "15.11.2018 10:30:23" format
            return day.substr(-2) + '.' + month.substr(-2) + '.' + year + ' ' + hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);
        };
        return DateTimeHelper;
    }());
    exports.DateTimeHelper = DateTimeHelper;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZVRpbWVIZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBwL2NvbW1vbi9kYXRlVGltZUhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFBQTtRQUFBO1FBb0RBLENBQUM7UUFuREc7Ozs7Ozs7V0FPRztRQUNJLDBCQUFXLEdBQWxCLFVBQW1CLFNBQWlCO1lBRWhDLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLHFDQUFxQztZQUMxRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQy9CLElBQUksS0FBSyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFFOUIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzVCLElBQUksT0FBTyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDdEMsSUFBSSxPQUFPLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUV0QyxvREFBb0Q7WUFDcEQsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUksSUFBSSxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JJLENBQUM7UUE4QkwscUJBQUM7SUFBRCxDQUFDLEFBcERELElBb0RDO0lBcERZLHdDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIERhdGVUaW1lSGVscGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIGZvcm1hdGVkIGRhdGV0aW1lIHN0cmluZyBmb3IgdGhlIGdpdmVuIHRpbWVzdGFtcFxyXG4gICAgICpcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXAgZS5nLiAxNTUyOTI1MTk3MDAwMDAwXHJcbiAgICAgKiBAcmV0dXJucyBlLmcuIFwiMTguMDMuMjAxOSAxNzowNjozN1wiXHJcbiAgICAgKiBAbWVtYmVyb2YgRGF0ZVRpbWVIZWxwZXJcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldERhdGVUaW1lKHRpbWVzdGFtcDogbnVtYmVyKXtcclxuXHJcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXAvMTAwMCk7IC8vIGRpdmlkZSBieSAxMDAwIHRvIGdldCBtaWxsaXNlY29uZHNcclxuICAgICAgICB2YXIgZGF5ID0gXCIwXCIgKyBkYXRlLmdldERhdGUoKTtcclxuICAgICAgICB2YXIgbW9udGggPSBcIjBcIiArIChkYXRlLmdldE1vbnRoKCkrMSk7XHJcbiAgICAgICAgdmFyIHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcblxyXG4gICAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcclxuICAgICAgICB2YXIgbWludXRlcyA9IFwiMFwiICsgZGF0ZS5nZXRNaW51dGVzKCk7XHJcbiAgICAgICAgdmFyIHNlY29uZHMgPSBcIjBcIiArIGRhdGUuZ2V0U2Vjb25kcygpO1xyXG5cclxuICAgICAgICAvLyBXaWxsIGRpc3BsYXkgdGltZSBpbiBcIjE1LjExLjIwMTggMTA6MzA6MjNcIiBmb3JtYXRcclxuICAgICAgICByZXR1cm4gZGF5LnN1YnN0cigtMikgKyAnLicgKyBtb250aC5zdWJzdHIoLTIpICsgJy4nICsgIHllYXIgKyAnICcgKyBob3VycyArICc6JyArIG1pbnV0ZXMuc3Vic3RyKC0yKSArICc6JyArIHNlY29uZHMuc3Vic3RyKC0yKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIDUgQnl0ZSBUaW1lKFJldHVybnZhbHVlID0gSEg6TU06U1MuMTAwIFRULk1NLllZWVkpXHJcbiAgICAgKlxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICogQHBhcmFtIHtVaW50OEFycmF5fSBieXRlc1xyXG4gICAgICogQHJldHVybnNcclxuICAgICAqIEBtZW1iZXJvZiBEYXRlVGltZUhlbHBlclxyXG4gICAgICovXHJcbiAgICAvKnN0YXRpYyBnZXRUNURhdGVUaW1lKGJ5dGVzOiBVaW50OEFycmF5KXtcclxuXHJcbiAgICAgICAgLy8geWVhciA8IDkwIC0+IGFmdGVyIDE5OTAgPT4gMjAwMCBtdXN0IGJlIGFkZGVkIG90aGVyd2lzZSAxOTAwIG11c3QgYmUgYWRkZWRcclxuICAgICAgICBsZXQgd1llYXIgPSBieXRlc1swXSA+PiAxO1xyXG4gICAgICAgIHdZZWFyIDwgOTAgPyB3WWVhciArPSAyMDAwIDogd1llYXIgKz0gMTkwMDtcclxuXHJcbiAgICAgICAgbGV0IGRheSA9IFwiMFwiICsgKGJ5dGVzWzFdICYgMHgxRik7XHJcbiAgICAgICAgbGV0IG1vbnRoID0gXCIwXCIgKyAoKChieXRlc1swXSAlIDIpIDw8IDMpICsgKGJ5dGVzWzFdID4+IDUpKTtcclxuICAgICAgICBsZXQgeWVhciA9IHdZZWFyO1xyXG5cclxuICAgICAgICBsZXQgaG91cnMgPSBieXRlc1syXSA+PiAzO1xyXG4gICAgICAgIGxldCBtaW4gPSAoKGJ5dGVzWzJdICYgMHgwNykgPDwgMykgKyAoYnl0ZXNbM10gPj4gNSk7XHJcbiAgICAgICAgbGV0IG1pbnV0ZXMgPSBcIjBcIiArIG1pbjtcclxuICAgICAgICBsZXQgc2VjID0gKChieXRlc1szXSAmIDB4MUYpIDw8IDEpICsgKGJ5dGVzWzRdID4+IDcpO1xyXG4gICAgICAgIGxldCBzZWNvbmRzID0gXCIwXCIgKyBzZWM7IFxyXG4gICAgICAgIGxldCBodW5kcmVkU2Vjb25kcyA9IFwiMFwiICsgKGJ5dGVzWzRdICYgMHg3Rik7XHJcblxyXG4gICAgICAgIC8vIFdpbGwgZGlzcGxheSB0aW1lIGluIC8vIDUgQnl0ZSBaZWl0YW5nYWJlIChSw7xja2dhYmV3ZXJ0ID0gSEg6TU06U1MuMTAwIFRULk1NLllZWVkpXHJcbiAgICAgICAgcmV0dXJuIGhvdXJzICsgJzonICsgbWludXRlcy5zdWJzdHIoLTIpICsgJzonICsgc2Vjb25kcy5zdWJzdHIoLTIpICsgXCIuXCIgKyBodW5kcmVkU2Vjb25kcy5zdWJzdHIoLTIpICsgXCIgXCIgKyBkYXkuc3Vic3RyKC0yKSArICcuJyArIG1vbnRoLnN1YnN0cigtMikgKyAnLicgKyAgeWVhcjtcclxuICAgIH0qL1xyXG59Il19