define(["require", "exports", "../userInteractionController", "../../ChartBase"], function (require, exports, userInteractionController_1, ChartBase_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ChartPanningStrategy = /** @class */ (function () {
        function ChartPanningStrategy(userInteractionController) {
            this.dragIsActive = false;
            this.currentDragChart = undefined;
            this.userInteractionController = userInteractionController;
        }
        ChartPanningStrategy.prototype.onMouseHover = function (chart, chartObjectTypeUnderMouse) {
            //TODO: remove direct chart access and move this to setCursor Method in Chart
            var chartDiv = $(chart.mainDiv);
            var canvasDiv = chartDiv.find("#" + chart.mainDivId + "_canvas");
            if (chartObjectTypeUnderMouse.chartObjectType == ChartBase_1.ChartObjectType.axis || chartObjectTypeUnderMouse.chartObjectType == ChartBase_1.ChartObjectType.chartSpace) {
                chartDiv.css("cursor", "pointer");
                canvasDiv.css("cursor", "pointer");
            }
            else {
                chartDiv.css("cursor", "default");
                canvasDiv.css("cursor", "default");
            }
        };
        ChartPanningStrategy.prototype.onClick = function (chart) {
        };
        ChartPanningStrategy.prototype.onMouseDown = function (chart, chartObjectTypeUnderMouse, mousePoint) {
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.togglePanning, chart, { boxZoomEnabled: false }));
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.toggleBoxZoom, chart, { panningEnabled: false }));
            if (chartObjectTypeUnderMouse.chartObjectType == ChartBase_1.ChartObjectType.cursor) {
                this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.togglePanning, chart, { boxZoomEnabled: false }));
                this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.toggleBoxZoom, chart, { panningEnabled: false }));
                this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.setCursorOnPointerPosition, chart, { cursorIndex: chartObjectTypeUnderMouse.args.cursorIndex, mousePoint: mousePoint }));
            }
            if (this.dragIsActive == false) {
                if (chartObjectTypeUnderMouse.args.axis != undefined) {
                    this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.selectPanningAxes, chart, { zoomAxes: chartObjectTypeUnderMouse.args.axis }));
                }
                else {
                    this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.selectPanningAxes, chart, { zoomAxes: undefined }));
                }
            }
            return chartObjectTypeUnderMouse;
        };
        ChartPanningStrategy.prototype.onDrag = function (chart, args) {
            if (this.currentDragChart == undefined || chart == this.currentDragChart) {
                if ((args.objectUnderMouse.chartObjectType != ChartBase_1.ChartObjectType.emptySpace && args.objectUnderMouse.chartObjectType != ChartBase_1.ChartObjectType.cursor) || this.dragIsActive == true) {
                    this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.panChart, chart, { args: args }));
                    this.dragIsActive = true;
                    this.currentDragChart = chart;
                }
            }
            if (this.dragIsActive == false) {
                if (args.objectUnderMouse.args.axis != undefined) {
                    this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.selectPanningAxes, chart, { zoomAxes: args.chartObjectUnderMouse.args.axis }));
                    this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.toggleBoxZoom, chart, { boxZoomEnabled: false }));
                    this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.togglePanning, chart, { panningEnabled: false }));
                }
            }
        };
        ChartPanningStrategy.prototype.onDragEnd = function (chart) {
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.endCursorDrag, chart, {}));
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.toggleBoxZoom, chart, { boxZoomEnabled: false }));
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.togglePanning, chart, { panningEnabled: false }));
            this.dragIsActive = false;
            this.currentDragChart = undefined;
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.resetDragPosition, null, {}));
        };
        return ChartPanningStrategy;
    }());
    exports.ChartPanningStrategy = ChartPanningStrategy;
});
//# sourceMappingURL=data:application/json;base64,