var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "../splitterWidget/splitterDefinition", "../../common/componentBase/componentSettings", "../common/splitterComponentSettings", "../common/componentDefaultDefinitionWidgetBase", "../../common/componentBase/componentDefaultSettingsPackage", "../../framework/componentHub/bindings/bindingDeclarations"], function (require, exports, splitterDefinition_1, componentSettings_1, splitterComponentSettings_1, componentDefaultDefinitionWidgetBase_1, componentDefaultSettingsPackage_1, Binding) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ComponentDefaultDefinition = /** @class */ (function (_super) {
        __extends(ComponentDefaultDefinition, _super);
        function ComponentDefaultDefinition() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultComponentSettingsId = "traceViewDefinition";
            _this.MainSplitterDefinitionId = "traceViewMainSplitterDefinition";
            _this.InnerSplitterDefinitionId = "traceViewInnerSplitterDefinition";
            _this.RightSplitterDefinitionId = "traceViewRightSplitterDefinition";
            return _this;
        }
        /**
         * Returns the default component settings for this widget
         *
         * @returns {ComponentSettings}
         * @memberof ComponentDefaultDefinition
         */
        ComponentDefaultDefinition.prototype.getDefaultComponentSettings = function () {
            var componentSettings = new componentSettings_1.ComponentSettings();
            // add sub compontents
            componentSettings.addSubComponent("SeriesProvider", ComponentDefaultDefinition.SeriesProviderId);
            componentSettings.addSubComponent("SplitterWidget", ComponentDefaultDefinition.SplitterWidgetTraceViewId, this.MainSplitterDefinitionId);
            // Add bindings
            componentSettings.addBindingByDecl(Binding.Traces.TraceData.Load, "", "invokeLoadTraceData");
            componentSettings.addBindingByDecl(Binding.Traces.TraceData.Loaded, "onTraceDataLoaded", "");
            componentSettings.addBindingByDecl(Binding.Traces.TraceData.LoadingError, "onErrorLoadingTraceData", "");
            componentSettings.addBindingByDecl(Binding.Traces.State, "onTraceStateChanged", "");
            componentSettings.addBindingByDecl(Binding.Traces.AvailableDataPoints, "updateAvailableDataPoints", "");
            return componentSettings;
        };
        ComponentDefaultDefinition.prototype.getMainSplitterDefinition = function () {
            var splitterComponentSettings = new splitterComponentSettings_1.SplitterComponentSettings(splitterDefinition_1.SplitterDefinition.orientationVertical);
            splitterComponentSettings.addPane("TraceControlWidget", ComponentDefaultDefinition.TraceControlWidgetId, "", splitterComponentSettings_1.SplitterComponentSettings.getPaneSettings(40, false));
            splitterComponentSettings.addPane("SplitterWidget", ComponentDefaultDefinition.SplitterWidgetMainTraceId, this.InnerSplitterDefinitionId, splitterComponentSettings_1.SplitterComponentSettings.getPaneSettings(-1, false));
            return splitterComponentSettings;
        };
        ComponentDefaultDefinition.prototype.getInnerSplitterDefinition = function () {
            var splitterComponentSettings = new splitterComponentSettings_1.SplitterComponentSettings(splitterDefinition_1.SplitterDefinition.orientationHorizontal);
            splitterComponentSettings.addPane("SignalManagerWidget", ComponentDefaultDefinition.SignalManagerWidgetId, "", splitterComponentSettings_1.SplitterComponentSettings.getPaneSettings(350));
            splitterComponentSettings.addPane("ChartViewWidget", ComponentDefaultDefinition.ChartViewWidgetId, "", splitterComponentSettings_1.SplitterComponentSettings.getPaneSettings(-1, true, 150));
            splitterComponentSettings.addPane("SplitterWidget", ComponentDefaultDefinition.SplitterWidgetRightTraceId, this.RightSplitterDefinitionId, splitterComponentSettings_1.SplitterComponentSettings.getPaneSettings(300));
            return splitterComponentSettings;
        };
        ComponentDefaultDefinition.prototype.getRightSplitterDefinition = function () {
            var splitterComponentSettings = new splitterComponentSettings_1.SplitterComponentSettings(splitterDefinition_1.SplitterDefinition.orientationVertical);
            splitterComponentSettings.addPane("ChartManagerWidget", ComponentDefaultDefinition.ChartManagerWidgetId, "", splitterComponentSettings_1.SplitterComponentSettings.getPaneSettings(-1));
            splitterComponentSettings.addPane("CursorInfoWidget", ComponentDefaultDefinition.CursorInfoWidgetId, "", splitterComponentSettings_1.SplitterComponentSettings.getPaneSettings(300));
            return splitterComponentSettings;
        };
        /**
         * Adds some default persisting data packages in the main default persisting data provider
         *
         * @returns {(ComponentDefaultSettingsPackage[]| undefined)}
         * @memberof ComponentDefaultDefinition
         */
        ComponentDefaultDefinition.prototype.getAdditionalDefaultComponentSettings = function () {
            var defaultSettingsPackages = new Array();
            defaultSettingsPackages.push(new componentDefaultSettingsPackage_1.ComponentDefaultSettingsPackage(this.MainSplitterDefinitionId, this.getMainSplitterDefinition()));
            defaultSettingsPackages.push(new componentDefaultSettingsPackage_1.ComponentDefaultSettingsPackage(this.InnerSplitterDefinitionId, this.getInnerSplitterDefinition()));
            defaultSettingsPackages.push(new componentDefaultSettingsPackage_1.ComponentDefaultSettingsPackage(this.RightSplitterDefinitionId, this.getRightSplitterDefinition()));
            return defaultSettingsPackages;
        };
        ComponentDefaultDefinition.SeriesProviderId = "SeriesProvider";
        ComponentDefaultDefinition.SplitterWidgetTraceViewId = "SplitterWidget_TraceView";
        ComponentDefaultDefinition.SplitterWidgetMainTraceId = "SplitterWidget_MainTrace";
        ComponentDefaultDefinition.SplitterWidgetRightTraceId = "SplitterWidget_RightTrace";
        ComponentDefaultDefinition.TraceControlWidgetId = "TraceControlWidget";
        ComponentDefaultDefinition.SignalManagerWidgetId = "SignalManagerWidget";
        ComponentDefaultDefinition.ChartViewWidgetId = "ChartViewWidget";
        ComponentDefaultDefinition.ChartManagerWidgetId = "ChartManagerWidget";
        ComponentDefaultDefinition.CursorInfoWidgetId = "CursorInfoWidget";
        return ComponentDefaultDefinition;
    }(componentDefaultDefinitionWidgetBase_1.ComponentDefaultDefinitionWidgetBase));
    exports.ComponentDefaultDefinition = ComponentDefaultDefinition;
});
//# sourceMappingURL=data:application/json;base64,